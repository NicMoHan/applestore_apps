APPLE STORE CSV FILE ANALYSIS USING SQL


CREATE TABLE applestore_description_combined AS

SELECT * FROM appleStore_description1
UNION ALL
SELECT * FROM appleStore_description2
UNION ALL
SELECT * FROM appleStore_description3
UNION ALL
SELECT * FROM appleStore_description4;

**EXPLORATORY DATA ANALYSIS**

--check the number of unique apps in both tables applAppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIds --7197
FROM AppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIds --7197
FROM applestore_description_combined

--check for any missing values in key fieldsAppleStore

SELECT COUNT(*) AS MissingValues --0 missing values
FROM AppleStore
WHERE track_name is null OR user_rating IS null OR prime_genre IS null

SELECT COUNT(*) AS MissingValues --0 missing values
FROM applestore_description_combined
WHERE app_desc is null

--find out the number of apps per genre

SELECT prime_genre, COUNT(*) as num_apps --leading genres: games, entertainment, education
FROM AppleStore
GROUP BY prime_genre
order BY num_apps DESC

--get overview of the apps' ratings

SELECT min(user_rating) AS min_rating, --0
		max(user_rating) AS max_rating, --5
    	avg(user_rating) AS avg_rating  --3.53
FROM AppleStore

--determine whether paid apps have higher rating than free appsAppleStore

SELECT CASE
WHEN price > 0 THEN 'Paid' --paid apps have slightly less avg rating
        ELSE 'Free'
        END AS App_Type,
        avg(user_rating) AS Avg_Rating 
FROM AppleStore
GROUP BY App_Type

--check if apps with more supported languages have higher rating

SELECT CASE
		WHEN lang_num <10 THEN '<10 languages'
    WHEN lang_num BETWEEN 10 AND 30 THEN '10-30 languages  --middle bucket has higher rating
        WHEN lang_num >30 THEN '>30 languages'
        END AS language_bucket,
        avg(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY language_bucket
ORDER BY Avg_Rating DESC

--check genres with low rating. This shows genres with potential to break into the market

SELECT prime_genre,
	avg(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY prime_genre
ODER BY Avg_Rating ASC
LIMIT 10

--check if there is correlation between the length of the app_Description and the user_Rating

SELECT CASE
		WHEN length(b.app_desc) <500 THEN 'Short'
        WHEN length(b.app_desc) BETWEEN 500 AND 1000 THEN 'Medium'
        ELSE 'Long' --the longer the description the better average rating is
        END AS description_length_bucket,
        avg(a.user_rating) AS average_rating
FROM
	AppleStore AS A
JOIN
	applestore_description_combined AS B
ON
	A.id = B.id
GROUP BY description_length_bucket
ORDER BY average_rating DESC

--check the top-rated apps for each genre
--looking for highest user rating
--& looking for highest number of ratings collected

SELECT
	prime_genre,
    track_name,
    user_rating
FROM (
  		SELECT
  		prime_genre,
  		track_name,
  		user_rating,
  		RANK() OVER(PARTITION BY prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) as rank
  		FROM
  		AppleStore
  	) as a
WHERE
a.rank = 1

